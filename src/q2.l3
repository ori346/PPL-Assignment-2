(define empty?
  (lambda (lst)
      (if (eq? '() lst)
          #t
            #f)
    )
  )

(define not (lambda (b)
  (if b
  #f
  #t
 )
 )
 )

(define filter
      (lambda (pred l)
        (if (empty? l)
            l
            (if (pred (car l))
                (cons (car l) (filter pred (cdr l)))
                      (filter pred (cdr l))))))



                 
(define append
  (lambda(lst1 lst2)
      (if (empty? lst2)
        lst1
        (append (add-last lst1 (car lst2)) (cdr lst2))))
  )


(define add-last
  (lambda (lst ele)
  (if (empty? lst)    
       (cons ele '())           
         (cons (car lst)     
               (add-last (cdr lst) ele))))) 


(define map
  (lambda (f l)
    (if (empty? l)
        '()
        (cons (f (car l))
              (map f (cdr l))))))

(define reverse 
  (lambda (lst)
    (if (empty? lst)
            lst
            (append (reverse (cdr lst)) (cons (car lst) '()))
            )
  )
)

(define dup
   (lambda(lst dc out)
      (if (empty? lst)
        out
        (if (= 0 (car dc)) 
          (dup (cdr lst ) (cdr dc) out)
          (dup lst (cons (- (car dc) 1) (cdr dc)) (add-last out (car lst))) 
        )
      )
      )
      )

(define length
  (lambda (lst)
    (if (empty? lst)
        0
        (+ 1 (length (cdr lst))))))

(define make-longer 
  (lambda (l1 l2) 
    (if (< (length l1) (length l2))
    l2
    (make-longer l1 (append l2 l2))
    )
)
)

(define duplicate-items
   (lambda(lst dup-count)
      (dup lst (make-longer lst dup-count) '())       
   )
)


(define payment
  (lambda (n coins-lst)
        (if (= n 0)
            1
            (if (< n 0)
                 0
                (if (empty? coins-lst)
                0
                (+ (payment (- n (car coins-lst)) (cdr coins-lst)) 
                (payment n (filter (lambda (x) (not(= x (car coins-lst)))) coins-lst)))
                
            )
            )
                )
            
  )
)


(define compose (lambda (f g)
        (lambda (x) (f (g x))) ))
                               
(define compose-n
  (lambda(f n)
       (if (= n 1)
           f
           (compose f (compose-n f (- n 1)))
  )
))
